// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String    @id @default(uuid())
  username  String    @unique
  email     String    @unique
  password  String
  createdAt DateTime  @default(now())

  profile   Profile?
  posts     Post[]
  likes     PostLike[]
  conversationsStarted PostConversation[] @relation("CommenterConversations")
  conversationsOwned   PostConversation[] @relation("OwnerConversations")
  messages             PostMessage[]
}

model Profile {
  id        String   @id @default(uuid())
  userId    String   @unique
  displayName String?
  bio       String?
  avatarUrl String?
  createdAt DateTime @default(now())

  user      User     @relation(fields: [userId], references: [id])
}

model Template {
  id        String    @id @default(uuid())
  name      String    @unique

  posts Post[]
}

model Post {
  id        String    @id @default(uuid())
  userId    String
  templateId String
  title     String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  user      User      @relation(fields: [userId], references: [id])
  template  Template @relation(fields: [templateId], references: [id])
  blocks    PostBlock[]
  likes     PostLike[]
  conversations PostConversation[]
}

model PostBlock {
  id        String   @id @default(uuid())
  postId    String
  type      BlockType
  content   String
  order     Int
  createdAt DateTime @default(now())

  post      Post     @relation(fields: [postId], references: [id])
}

enum BlockType {
  text
  image
}

model PostConversation {
  id            String   @id @default(uuid())
  postId        String
  postOwnerId   String
  commenterId   String
  createdAt     DateTime @default(now())

  post          Post     @relation(fields: [postId], references: [id])
  postOwner     User     @relation("OwnerConversations", fields: [postOwnerId], references: [id])
  commenter     User     @relation("CommenterConversations", fields: [commenterId], references: [id])
  messages      PostMessage[]

  @@unique([postId, commenterId])
}

model PostMessage {
  id              String   @id @default(uuid())
  conversationId  String
  senderId        String
  content         String
  createdAt       DateTime @default(now())

  conversation    PostConversation @relation(fields: [conversationId], references: [id])
  sender          User             @relation(fields: [senderId], references: [id])
}

model PostLike {
  id        String   @id @default(uuid())
  userId    String
  postId    String
  createdAt DateTime @default(now())

  user      User     @relation(fields: [userId], references: [id])
  post      Post     @relation(fields: [postId], references: [id])

  @@unique([userId, postId])
}

